# Main Hub - Innovation, Incubation & DevelopmentÂ®
# https://www.mainhub.pt/  
# -----------------------------------------------------------------------------
# Azure Devops Pipeline
# -----------------------------------------------------------------------------
# Commit pipeline, to execute .NET Core solutions
# This pipeline is executed on the branches "main"/"dev"/"releases" after PR.
#
# Every other location, it will not be executed.
# -----------------------------------------------------------------------------
name: "CI-Pipeline"

trigger:
  branches:
    include:
      - "main"
      - "master"
      - "develop"
  paths:
    exclude:
      - "./infra/*"
      - "./wiki/*"
      - "./doc/*"

pool:
 name: 'MainHub Windows SelfHosted'
  #vmImage: ubuntu-latest

variables:
  buildConfiguration: "Release"
  solutionFileName: "MainHub.Internal.Internship.PeopleAndCulture"
  majorVersion: "1"
  minorVersion: "0"
  patchVersion: "0"
  artifactVersion: "$(majorVersion).$(minorVersion).$(patchVersion).$(BUILD_BUILDNUMBER)"
  solutionFile: "./$(solutionFileName).sln"
  artifactName: "$(solutionFileName)-drop"

parameters:
  - name: clean
    displayName: Checkout clean
    type: boolean
    default: false
    values:
      - false
      - true

workspace:
  clean: all

steps:
  # ------------------------------
  # Repository Checkout
  # ------------------------------
  - checkout: self
    displayName: "Repository Checkout."
    clean: "true"

  # ------------------------------
  # Install .NET 6 SDK
  # ------------------------------
  - task: UseDotNet@2
    displayName: 'Install .NET 6 SDK'
    inputs:
      packageType: 'sdk'
      version: '6.0.407'
      performMultiLevelLookup: true

  # ------------------------------
  # Connect to SonarCloud account
  # ------------------------------
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'Main Hub Sonar Cloud Service Connection-MainHub.Internal.Internship.PeopleAndCulture'
      organization: 'mainhub'
      scannerMode: 'MSBuild'
      projectKey: 'MainHub.Internal.Internship.PeopleAndCulture'
      extraProperties: "sonar.cs.vstest.reportsPaths=**/*.trx\nsonar.cs.opencover.reportsPaths=**/*.opencover.xml"

  # ------------------------------
  # Restoring nuget packages
  # ------------------------------
  - task: DotNetCoreCLI@2
    displayName: "Restoring nuget packages"
    inputs:
      command: 'restore'
      projects: '$(solutionFile)'
      feedsToUse: 'config'
      nugetConfigPath: './nuget.config'

  # ------------------------------
  # Install ReportGenerator Tool
  # ------------------------------
  - task: CmdLine@2
    displayName: "Install ReportGenerator Tool."
    continueOnError: true
    enabled: false
    inputs:
      script: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.0.4

  # ------------------------------
  # Building Solution
  # ------------------------------
  - task: DotNetCoreCLI@2
    displayName: "Building Solution."
    inputs:
      command: build
      projects: "$(solutionFile)"
      arguments: "--configuration $(buildConfiguration)"

  # ------------------------------
  # Running Unit Tests
  # ------------------------------
  - task: CmdLine@2
    displayName: "Running Unit Tests."
    inputs:
      script: dotnet test $(solutionFile) --configuration $(buildConfiguration) --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=TestResults/Coverage/ --collect:"XPlat Code Coverage" --results-directory "./artifacts"
  
  # ------------------------------
  # SCA (Sonar Cloud)  Source Code Analisys
  # ------------------------------
  - task: SonarCloudAnalyze@1
    displayName: "SCA (Sonar Cloud)  Source Code Analisys."

  # ------------------------------
  # Generating Reports.
  # ------------------------------
  - script: 'reportgenerator -reports:**/coverage.opencover.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -tag:$(Build.BuildNumber) -reportTypes:htmlInline'
  #- script: 'reportgenerator -reports:"artifacts/**/coverage.cobertura.xml" -targetdir:$(Build.SourcesDirectory)/coverlet/reports -tag:$(Build.BuildNumber) -reportTypes:htmlInline'
    displayName: "Generating Reports."
    continueOnError: true

  # ------------------------------
  # Publish results to Sonar Cloud Service
  # ------------------------------
  - task: SonarCloudPublish@1
    displayName: "Publish results to Sonar Cloud Service."
    inputs:
      pollingTimeoutSec: '300'

  # ------------------------------
  # Verify if analisys is OK
  # ------------------------------
  - task: sonarcloud-buildbreaker@2
    displayName: "Verify if analisys is OK."
    inputs:
      SonarCloud: 'Main Hub Sonar Cloud Service Connection-MainHub.Internal.Internship.PeopleAndCulture'
      organization: 'mainhub'
    enabled: true

  # ------------------------------
  # Publish Tests Results
  # ------------------------------
  - task: PublishTestResults@2
    displayName: "Publish Tests Results"
    inputs:
      testRunner: VSTest
      testResultsFiles: "**/*.trx"
      failTaskOnFailedTests: true

  # ------------------------------
  # Publish Code Coverage Results
  # ------------------------------
  - task: PublishCodeCoverageResults@1
    displayName: "Publish Code Coverage Results."
    inputs:
      codeCoverageTool: "cobertura"
      summaryFileLocation: artifacts/**/coverage.cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/TestResults/Coverage/Reports
      failIfCoverageEmpty: false

  # ------------------------------
  # Publish Solution Artifacts Results
  # ------------------------------
  - task: DotNetCoreCLI@2
    displayName: "Publish artifacts"
    inputs:
      command: "publish"
      publishWebProjects: false
      arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Output"
      zipAfterPublish: true
      projects: "src/**/*.csproj"
      modifyOutputPath: true

  # ------------------------------
  # Publish Build Artifacts Results
  # ------------------------------
  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "$(artifactName)"
      publishLocation: "Container"
