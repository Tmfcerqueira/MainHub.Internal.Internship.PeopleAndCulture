@page "/birthdays"
@using global::App.Models;
@using global::App.Repository;
@using global::PeopleManagement.Api.Proxy.Client.Api;
@attribute [Authorize(Policy = "Supervisor")]
@inject PeopleAppRepository peopleAppRepository
@inject ICollaboratorApi collaboratorProxy
@inject NavigationManager NavigationManager
@inject DialogService dialogService
@inject IJSRuntime JsRuntime
@inject TooltipService tooltipService
@inject IStringLocalizer<Resource> Loc



@layout PrivateMainLayout



@if (isLoading == true)
{
    <p>@Loc["LoadingBirthdays"]</p>
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
    <h3 style="text-align:center; margin-bottom: 2rem"> @Loc["Anniverseries"] </h3>
    @if (Count == 0)
    {
        <RadzenText> @Loc["NoAnniverseries"] </RadzenText>
    }
    else
    {
        <RadzenDataGrid AllowPaging="true"
                LoadData="@LoadData"
                AllowFiltering="false"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="false"
                PagerHorizontalAlign="HorizontalAlign.Justify"
                ShowPagingSummary="true"
                Data="@birthdays"
                TItem="AllPeopleModel"
                Count="@Count"
                PageSize="@PageSize"
                IsLoading="@isLoading"
                RowDoubleClick="(args) => ShowCollaborator(args.Data.PeopleGUID)"
                        class="custom-datagrid">

            <Columns>
                <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["Name"]" Frozen="true">
                    <Template Context="birthdays">
                        <RadzenText Style="text-align:left; " TextStyle="TextStyle.Body1"><b>@(birthdays.FirstName + " " + birthdays.LastName)</b></RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["BirthDate"]">
                    <Template Context="birthdays">
                        @if (birthdays.BirthDate.ToString("dd-MM-yyyy") == "01-01-0001" || birthdays.BirthDate.ToString("dd-MM-yyyy") == "31-12-2999" || birthdays.BirthDate.ToString("dd-MM-yyyy") == "01-01-1900")
                        {
                            <RadzenText TextStyle="TextStyle.Body2">@Loc["NoDate"]</RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body2">@birthdays.BirthDate.ToString("dd-MM-yyyy")</RadzenText>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["TableDaysUntil"]">
                    <Template Context="birthdays">
                        @if (birthdays.BirthDate.Day - DateTime.Now.Day == 0)
                        {
                            <RadzenText TextStyle="TextStyle.Body2">@Loc["TableDays"]</RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body2">@(birthdays.BirthDate.Day - DateTime.Now.Day)</RadzenText>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    RadzenDataGrid<AllPeopleModel> grid;
    List<AllPeopleModel> birthdays { get; set; }
    private int PageSize { get; set; } = 5;
    private int Count { get; set; }
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LoadDataArgs args = new LoadDataArgs()
                {
                    Filter = "",
                    Skip = 0,
                    OrderBy = "",
                    Top = PageSize,
                };
            birthdays = new List<AllPeopleModel>();
            await LoadData(args);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    async Task LoadData(LoadDataArgs args)
    {
        try
        {
            var skip = args.Skip ?? 0;
            var page = (int)(skip / PageSize) + 1;
            var filter = args.Filter;

            birthdays = await peopleAppRepository.GetBirthdays();
            Count = birthdays.Count();
            isLoading = false;


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    public void ShowCollaborator(Guid Id)
    {
        try
        {
            NavigationManager.NavigateTo($"Collaborators/{Id}");
        }
        catch (Exception ex)
        {
            dialogService.Alert($"There is no more information about this user", "No information", new AlertOptions() { OkButtonText = "Ok" });
            Console.WriteLine(ex);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Details", options);

}
