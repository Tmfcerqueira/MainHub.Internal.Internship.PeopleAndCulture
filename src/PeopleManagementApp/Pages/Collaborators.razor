@page "/collaborators"
@using global::App.Models;
@using global::App.Repository;
@using filterMode = Radzen.FilterMode;
@using global::PeopleManagement.Api.Proxy.Client.Api;
@inject ICollaboratorApi collaboratorProxy
@inject PeopleAppRepository peopleAppRepository
@inject NavigationManager NavigationManager
@inject DialogService dialogService
@inject IJSRuntime JsRuntime
@inject TooltipService tooltipService
@inject GraphServiceClient graphServiceClient
@inject IStringLocalizer<Resource> Loc
@layout PrivateMainLayout
@attribute [Authorize(Policy = "Supervisor")]

<div class="breadcrumb" style="justify-content: left;">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/Home" Text="@Loc["Home"]" />
        <RadzenBreadCrumbItem Path="/Collaborators" Text="@Loc["CollaboratorsList"]" />
    </RadzenBreadCrumb>
</div>
<div class="container">
<RadzenRow>
    <RadzenColumn Style="display:grid; justify-content:start;">
        <RadzenButton Variant="Variant.Text" style="justify-content:left; display:grid;" Click="() => GoBack()"><i class="fas fa-solid fa-arrow-left"></i> </RadzenButton>
        </RadzenColumn>
    <RadzenColumn Style="display:grid; justify-content:center;">
            <RadzenText TextStyle="TextStyle.H5" style="justify-content:center;"> @Loc["CollaboratorsName"]</RadzenText>
    </RadzenColumn>
    <RadzenColumn Style="display:grid; justify-content:end;">
        <RadzenButton Variant="Variant.Text" style="justify-content:right;" Click=" ()=> GoForward()"><i class="fas fa-solid fa-arrow-right"></i> </RadzenButton>
    </RadzenColumn>
</RadzenRow>
    <RadzenRow>
        <RadzenColumn Style="justify-content:left; display:grid;">
            <RadzenRow>
                <RadzenTextBox Placeholder="@Loc["SearchPlaceHolder"]" @bind-Value="filter" style="justify-content:left; display:grid;"></RadzenTextBox>
                @if (IsFiltered == false)
                {
                    <RadzenButton Variant="Variant.Text" Text="🔍" style="justify-content:left; display:grid;" class="rz-text-secondary-color" Click="() => Search(filter)"></RadzenButton>
                }
                else if (IsFiltered == true)
                {
                    <RadzenButton Variant="Variant.Text" Text="❌" style="justify-content:left; display:grid;" class="rz-text-secondary-color" Click="() => Search(filter)"></RadzenButton>
                }
                <RadzenIcon Icon="help_outline" MouseEnter="@(args => ShowTooltip(args) )" />
            </RadzenRow>
        </RadzenColumn>
        <RadzenColumn Style="display:grid; justify-content:center;">
            <RadzenRow>
                @if (listfilter == State.Active)
            {
                    <RadzenButton Variant="Variant.Text" style="display:grid; justify-content:center;" Text="@Loc["SeeInactiveButton"]" class="rz-text-secondary-color" Click="() => ShowActive(State.Inactive)"></RadzenButton>
                    <RadzenButton Variant="Variant.Text" style="display:grid; justify-content:center;" Text="@Loc["SeeAllButton"]" class="rz-text-secondary-color" Click="() => ShowActive(State.All)"></RadzenButton>
            }
            else if (listfilter == State.Inactive)
            {
                    <RadzenButton Variant="Variant.Text" style="display:grid; justify-content:center;" Text="@Loc["SeeActiveButton"]" class="rz-text-secondary-color" Click="() => ShowActive(State.Active)"></RadzenButton>
                    <RadzenButton Variant="Variant.Text" style="display:grid; justify-content:center;" Text="@Loc["SeeAllButton"]" class="rz-text-secondary-color" Click="() => ShowActive(State.All)"></RadzenButton>
            }
            else if (listfilter == State.All)
            {
                    <RadzenButton Variant="Variant.Text" style="display:grid; justify-content:center;" Text="@Loc["SeeActiveButton"]" class="rz-text-secondary-color" Click="() => ShowActive(State.Active)"></RadzenButton>
                    <RadzenButton Variant="Variant.Text" style="display:grid; justify-content:center;" Text="@Loc["SeeInactiveButton"]" class="rz-text-secondary-color" Click="() => ShowActive(State.Inactive)"></RadzenButton>
            }
            </RadzenRow>
        </RadzenColumn>
        <RadzenColumn>
            <div style="display: grid; justify-content:right;">
                <RadzenButton Variant="Variant.Text" class="rz-text-secondary-color" Click="() => AddACollaborator()">@Loc["AddCollaboratorButton2"]  <i class="fas fa-solid fa-plus"></i></RadzenButton>
            </div>
        </RadzenColumn>
    </RadzenRow>




<RadzenDataGrid AllowPaging="true"
                LoadData="@LoadData"
                AllowFiltering="false"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="false"
                PagerHorizontalAlign="HorizontalAlign.Justify"
                ShowPagingSummary="true"
                Data="@_collaborators.collaborators"
                TItem="AllPeopleModel"
                Count="@Count"
                PageSize="@PageSize"
                IsLoading="@isLoading"
                RowDoubleClick="(args) => ShowCollaborator(args.Data.PeopleGUID)"
                class="custom-datagrid">

    <Columns>
            <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["Name"]" Frozen="true">
            <Template Context="collaborator">
                <RadzenText Style="text-align:left; " TextStyle="TextStyle.Body1"><b>@(collaborator.FirstName + " " + collaborator.LastName)</b></RadzenText>
            </Template>
        </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["BirthDate"]">
            <Template Context="collaborator">
                    @if (collaborator.BirthDate.ToString("dd-MM-yyyy") == "01-01-0001" || collaborator.BirthDate.ToString("dd-MM-yyyy") == "31-12-2999" || collaborator.BirthDate.ToString("dd-MM-yyyy") == "01-01-1900")
                {
                        <RadzenText TextStyle="TextStyle.Body2">@Loc["NoDate"]</RadzenText>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body2">@collaborator.BirthDate.ToString("yyyy-MM-dd")</RadzenText>
                }
            </Template>
        </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["EntryDate"]">
            <Template Context="collaborator">
                @if (collaborator.EntryDate.ToString("dd-MM-yyyy") == "01-01-0001" || collaborator.EntryDate.ToString("dd-MM-yyyy") == "31-12-2999" || collaborator.EntryDate.ToString("dd-MM-yyyy") == "01-01-1900")
                {
                        <RadzenText TextStyle="TextStyle.Body2">@Loc["NoDate"]</RadzenText>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body2">@collaborator.EntryDate.ToString("yyyy-MM-dd")</RadzenText>
                }
            </Template>
        </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="AllPeopleModel" Title="@Loc["Contact"]">
                <Template Context="collaborator">
                    @if (collaborator.Contact == null || collaborator.Contact == string.Empty)
                    {
                        <RadzenText TextStyle="TextStyle.Body2"> @Loc["NoContact"]</RadzenText>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body2"> @collaborator.Contact</RadzenText>
                    }
                </Template>
            </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
</div>
    
@code {


    private (List<AllPeopleModel> collaborators, int count) _collaborators;
    User? _user;
    bool isLoading = false;
    private bool birthday = false;
    private int PageSize { get; set; } = 10;
    private int Count { get; set; }
    public Guid personGuid { get; set; }
    bool isEditMode = false;
    private string filter { get; set; } = null!;
    bool IsFiltered = false;
    State listfilter = State.Active;
    private int page { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            LoadDataArgs args = new LoadDataArgs()
                {
                    Filter = "",
                    Skip = 0,
                    OrderBy = "",
                    Top = PageSize,
                };

            await LoadData(args);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            var skip = args.Skip ?? 0;
            page = (int)(skip / PageSize) + 1;
            var filter = args.Filter;

            _collaborators = await peopleAppRepository.GetAllCollaborators(page, PageSize, null!, listfilter);

            Count = _collaborators.count;
            isLoading = false;


        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    public async Task Search(string filter)
    {
        PageSize = 10;
        if (IsFiltered == false)
        {
            isLoading = true;
            _collaborators = await peopleAppRepository.GetAllCollaborators(page, PageSize, filter, listfilter);
            Count = _collaborators.count;
            isLoading = false;
            IsFiltered = true;
        }
        else if (IsFiltered == true)
        {
            isLoading = true;
            _collaborators = await peopleAppRepository.GetAllCollaborators(page, PageSize, null!, listfilter);
            Count = _collaborators.count;
            isLoading = false;
            IsFiltered = false;
        }
    }

    private async Task ShowActive(State list)
    {
        isLoading = true;
        listfilter = list;
        _collaborators = await peopleAppRepository.GetAllCollaborators(page, PageSize, null!, listfilter);
        Count = _collaborators.count;
        isLoading = false;
    }

    public void ShowCollaborator(Guid Id)
    {
        try
        {
            NavigationManager.NavigateTo($"Collaborators/{Id}");
        }
        catch(Exception ex)
        {
            dialogService.Alert($"{Loc["NoInfo"]}", $"{Loc["NoInfoTitle"]}", new AlertOptions() { OkButtonText = "Ok" });
            Console.WriteLine(ex);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }
    private async void ShowObservations(Guid peopleGuid)
    {
        var collaborator = await peopleAppRepository.GetOneCollaborator(peopleGuid);
        if (collaborator.Observations == null || collaborator.Observations == "")
        {
            bool? confirm = await dialogService.Confirm($"{Loc["NoObservation"]}", $"{Loc["NoObservationTitle"]}", new ConfirmOptions() { OkButtonText = $"{Loc["Yes"]}", CancelButtonText = $"{Loc["No"]}" });
            if (confirm == true)
            {
                await dialogService.OpenAsync<CollaboratorObservations>(
           $"{collaborator.FirstName} {Loc["ObservationsButton"]}",
          new Dictionary<string, object>() { { "PeopleGuid", peopleGuid } },
           new DialogOptions() { Width = "500px", Height = "300px", Resizable = true, Draggable = true });
            }
        }
        else
        {
            await dialogService.OpenAsync<CollaboratorObservations>(
            $"{collaborator.FirstName} {Loc["ObservationsButton"]}",
           new Dictionary<string, object>() { { "PeopleGuid", peopleGuid } },
            new DialogOptions() { Width = "500px", Height = "300px", Resizable = true, Draggable = true });
        }
    }

    private void AddACollaborator()
    {
        NavigationManager.NavigateTo("collaborators/add");
    }

    private async void GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }
    private async void GoForward()
    {
        await JsRuntime.InvokeVoidAsync("history.forward");
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, $"{Loc["Tooltip"]}", options);
}